//! This module is a game where the user is to guess a number generated by the
//! computer within a given amount of tries.

use std::io;
use rand::Rng;

/// Generates a random unsigned 8 bit integer.
fn generate_random_number() -> u8 {
    let mut rng: rand::rngs::ThreadRng = rand::thread_rng();
    return rng.gen();
}

/// Compares two unsigned 8 bit integers.
/// 
/// This function takes a guess and a number to guess and compares them.
/// 
/// # Arguments
/// 
/// * `guess` - A `u8` to be compared against `to_guess`.
/// * `to_guess` - A `u8` to have `guess` compared against.
/// 
/// # Return value
/// 
/// If `guess` is larger than `to_guess` 1 is returned,
/// if `guess` is smaller than `to_guess` 0 is returned,
/// otherwise 2 is returned.
fn evaluate_guess(guess: u8, to_guess: u8) -> u8 {
    if guess > to_guess {return 1;}

    if guess < to_guess {return 0;}

    return 2;
}

/// Converts string to a unsigned 8 bit integer.
/// 
/// # Arguments
/// 
/// * `guess` - A borrowed string, or `None`, that can be parsed into an 
///             unsigned 8 bit integer.
/// 
/// # Return value
/// 
/// If `guess` can be succesfully parsed into a unsigned 8 bit integer then 
/// `Some(u8)` will be returned, otherwise `None` is returned.
fn guess_to_u8(guess: Option<&str>) -> Option<u8> {
    return guess.map(|s| s.parse::<u8>())?
                .ok();
}

pub fn run_self() {
    let stdin: io::Stdin = io::stdin();

    let mut stop: bool = false;
    let mut user_input: String;
    
    while stop != true {
        user_input = String::new();

        // `stdin.read_line` returns a `io::Result` which is comparable to 
        // Haskell's `Maybe` monad. A `Result` contains either a success value
        // or an error value.
        match stdin.read_line(&mut user_input) {
            Err(_) => stop = false,
            Ok(_) => {
 
            }
        }
    }
}